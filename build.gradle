
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

plugins {
    id 'java'
    id 'groovy'
    
    id 'eclipse'
    id 'idea'
    
    id 'signing'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "com.jfrog.bintray" version "1.7.2"
    
    
    
    id "net.saliman.properties" version "1.4.6"
    id 'com.github.jk1.dependency-license-report' version '0.3.8'
}

project.version.with {
    major = jdkbugVersionMajor as int
    minor= jdkbugVersionMinor as int
    patch = jdkbugVersionPatch as int
    if (project.hasProperty('jdkbugVersionLabel')) {
        preRelease = jdkbugVersionLabel
    }
    releaseBuild = Boolean.valueOf(jdkbugReleaseBuild)
}
ext.jdkbugVersion = project.version as String
ext.jdkbugTag = Boolean.valueOf(jdkbugReleaseBuild) ? "v$ext.jdkbugVersion" : 'master'

repositories {
  jcenter()
  mavenCentral()
}

def pomConfig = {
    url "https://github.com/siordache/jdkbug"
    developers {
    }
    scm {
        connection "https://github.com/siordache/jdkbug.git"
        developerConnection "https://github.com/siordache/jdkbug.git"
        url "https://github.com/siordache/jdkbug"
    }
}

ext.groovyVersion = '2.4.7'


group = 'org.beryx'
version = jdkbugVersion

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}






repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

configurations {
  provided
  compile {transitive = true}
}


signing {
    sign configurations.archives
}

signArchives {
  onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
  
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
  
  testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
  testCompile('org.spockframework:spock-core:1.1-groovy-2.4-rc-2') {
      exclude module: 'groovy-all'
  }
  testCompile 'cglib:cglib-nodep:3.2.4'
  testCompile 'org.objenesis:objenesis:2.4'
  testCompile('com.athaydes:spock-reports:1.2.13') { transitive = false}
  
  testCompile('ch.qos.logback:logback-classic:1.1.7')
}

sourceSets.main.compileClasspath += configurations.provided

jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': jdkbugVersion
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}
artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
}

publishing {
    publications {
        "jdkbug"(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId 'org.beryx'
            artifactId project.name
            version jdkbugVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "Module $project.name")
                root.appendNode('description', "The $project.name artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

task "create-dirs" {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
            }
        }
        plusConfigurations << configurations.provided
    }
    project {
        file.beforeMerged { project ->
            project.natures.clear()
        }
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") } 






configureJavadoc(javadoc)

def configureJavadoc(task) {
  configure(task) {
      title "jdkbug Documentation ($jdkbugVersion)"
      destinationDir file("build/docs/javadoc")
      if(project.configurations.hasProperty('provided')) {
          classpath += project.configurations.provided
      }
      configure(options) {
          links "http://docs.oracle.com/javase/8/docs/api/"
      }
  }
}
